import openai
import os
import streamlit as st
import re
import random
import base58

# Aseta OpenAI API-avain
# Haetaan OpenAI API-avain ymp√§rist√∂muuttujasta
openai.api_key = os.getenv("OPENAI_API_KEY")

client = openai.Client(api_key=openai.api_key)  # K√§ytet√§√§n ymp√§rist√∂muuttujaa

# Avainsana tentin aloittamiseen
REQUIRED_KEYWORD = "medtentti"

# Alustetaan session state
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "selected_field" not in st.session_state:
    st.session_state.selected_field = None
if "questions" not in st.session_state:
    st.session_state.questions = []
    st.session_state.correct_answers = []
    st.session_state.user_answers = {}
    st.session_state.short_answer_questions = []
    st.session_state.short_answer_responses = {}
    st.session_state.feedback = []
    st.session_state.submitted = False

# **1Ô∏è‚É£ Avainsana ennen tentti√§**
st.title("ü©∫ L√§√§ketieteen tenttibotti testaukseen - GPT-4o/PH25/v2biol")
st.write("Tenttibotti on ulkoinen palvelu, se ei tallenna mit√§√§n mutta k√§yt√∂n rajaamiseksi on luotu avainsana")
st.write("Voit luoda tentin niin monta kertaa kuin haluat - tentin j√§lkeen saat koodin, jolla voit todistaa tehneesi tentin")

if not st.session_state.authenticated:
    user_keyword = st.text_input("Sy√∂t√§ avainsana:", type="password")
    if st.button("‚úÖ Jatka"):
        if user_keyword == REQUIRED_KEYWORD:
            st.session_state.authenticated = True
            st.rerun()
        else:
            st.error("‚ùå Virheellinen avainsana. Yrit√§ uudelleen.")
    st.stop()

# **2Ô∏è‚É£ Erikoisalan valinta**
st.write("AI:n promptausta varten tarvitsen tarkemman alan kuvauksen - esim: Biol√§√§ketiede, Fysiologia tai jokin muu t√§smennys")

if not st.session_state.selected_field:
    selected_field = st.text_input("Kirjoita l√§√§ketieteen alan tarkempi m√§√§ritelm√§:")
    if st.button("üéØ Aloita tentti") and selected_field:
        st.session_state.selected_field = selected_field
        st.rerun()
    st.stop()

# **3Ô∏è‚É£ Tenttikysymysten generointi**
def generate_questions():
    """Generoi 4 monivalintakysymyst√§ ja 2 sanallista kysymyst√§ valitun annetun l√§√§ketieteen tai biol√§√§ketieteen alan perusteella."""
    prompt = (
        f"Luo tentti biol√§√§ketieteen opiskelijoille. Tentti on aihealue on {st.session_state.selected_field} keskeiset kysymykset"
        "Kysymysten tulee kattaa t√§m√§n alan keskeiset aiheet, jotka ovat biol√§√§ketieteellisesti merkitt√§vi√§ ja opetuksessa painotettuja."
        "Tentti sis√§lt√§√§ 4 merkityksellist√§ monivalintakysymyst√§ ja 2 lyhyen vastauksen sanallista kysymyst√§, jotka vaativat p√§√§ttely√§. "
        "V√§lt√§ monivalintakysymyksiss√§ vastakkaisia vaihtoehtoja."
        "Kysymysten tulee olla vaikeita ja vaatia syv√§llist√§ biol√§√§ketieteellist√§ perusosaamista. "
        "V√§lt√§ potilastapauksia - keskity alan perusosaamiseen."
        "√Ñl√§ k√§yt√§ triviaalien yksityiskohtien tai harvinaisten oireyhtymien kysymyksi√§.\n\n"
### **Monivalintakysymysten lis√§vaatimukset:**  
        "V√§√§rien vastausvaihtoehtojen tulee olla uskottavia: v√§lt√§ liian ilmeisi√§ tai triviaaleja vaihtoehtoja. " 
        "K√§yt√§ harhaanjohtavia mutta todenn√§k√∂isi√§ virhevaihtoehtoja"  
        "Kysymysten tulee mitata syvemp√§√§ ymm√§rryst√§ eik√§ vain faktamuistia."  
### **Lyhyen vastauksen kysymysten lis√§vaatimukset:**  
        "Vaadi p√§√§ttely√§ ja syy-seuraussuhteiden ymm√§rt√§mist√§. Keskity kysymyksiss√§ alan ydinsis√§lt√∂ihin." 
        "Esit√§ vastaukseen vaadittavat taustatiedot kysymyksess√§." 
        "Ole tarkka suomen kielen bio- ja l√§√§ketieteellisess√§ terminologiassa sek√§ hyv√§ss√§ kieliasussa. K√§yt√§ selke√§√§ ja luonnollista suomen kielt√§. K√§yt√§ aina eurooppalaisia mittayksik√∂it√§ (esim. kg, mmol/l, ¬∞C) ja v√§lt√§ amerikkalaisia yksik√∂it√§ tai vieraskielisi√§ termej√§."
        "K√§yt√§ k√§yp√§ hoito suosituksiin perustuvia ratkaisuja kliinisiss√§ kysymyksiss√§. Tarkista, ett√§ kysymyksiss√§ noudatetaan modernia k√§yt√§nt√∂√§ ja juuri annettuja s√§√§nt√∂j√§. Kerro, jos jokin kysymys rikkoo ohjeita"
        "Muotoile vastaus n√§in:\n\n"
        "1. Kysymys: [Kirjoita kysymysteksti t√§h√§n]\n"
        "   A) [Vaihtoehto 1]\n"
        "   B) [Vaihtoehto 2]\n"
        "   C) [Vaihtoehto 3]\n"
        "   D) [Vaihtoehto 4]\n"
        "   Oikea vastaus: [A, B, C tai D]\n\n"
        "5. Sanallinen kysymys: [Kliininen tapausesimerkki tai analyyttinen kysymys]\n"
        "6. Sanallinen kysymys: [Toinen syv√§llinen l√§√§ketieteellinen kysymys]"
    )

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )

    raw_text = response.choices[0].message.content

    questions = []
    correct_answers = []
    short_answer_questions = []
    mcq_pattern = re.findall(r"\d+\.\s*Kysymys:\s*(.*?)(?:\n\s*A\))", raw_text, re.DOTALL)
    options_pattern = re.findall(r"A\)\s*(.*?)\n\s*B\)\s*(.*?)\n\s*C\)\s*(.*?)\n\s*D\)\s*(.*?)\n", raw_text)
    correct_pattern = re.findall(r"Oikea vastaus:\s*([A-D])", raw_text)
    short_answer_pattern = re.findall(r"\d+\.\s*Sanallinen kysymys:\s*(.*)", raw_text)

    for i, (question, options) in enumerate(zip(mcq_pattern, options_pattern)):
        formatted_options = {chr(65 + j): option.strip() for j, option in enumerate(options)}
        questions.append({"question": question.strip(), "options": formatted_options})
        correct_answers.append(correct_pattern[i].strip())

    short_answer_questions = [q.strip() for q in short_answer_pattern]

    return questions, correct_answers, short_answer_questions

# **4Ô∏è‚É£ Luo tentti -nappi**
st.write("### Luo tentti painamalla alla olevaa nappia.")

if st.button("üìù Luo tentti"):
    st.session_state.questions, st.session_state.correct_answers, st.session_state.short_answer_questions = generate_questions()
    st.session_state.feedback = []
    st.session_state.submitted = False
    st.rerun()

# **5Ô∏è‚É£ N√§yt√§ kysymykset heti tentin luonnin j√§lkeen**
if st.session_state.questions:
    st.write("## üìã Tenttikysymykset 1p/oikea vastaus")
    for idx, q in enumerate(st.session_state.questions):
        st.markdown(f"**Kysymys {idx + 1}:** {q['question']}")
        answer_labels = [f"{key}) {value}" for key, value in q["options"].items()]
        selected_option = st.radio(f"Valitse vastaus kysymykseen {idx + 1}:", answer_labels, index=None, key=f"mcq_{idx}")
        st.session_state.user_answers[idx] = selected_option[0] if selected_option else None

    for idx, q in enumerate(st.session_state.short_answer_questions):
        st.write(f"## ‚úç Sanallinen kysymys {idx + 1} (0-3p)")
        st.session_state.short_answer_responses[f"short_answer_{idx}"] = st.text_area(q, key=f"short_answer_{idx}")

def generate_exam_code(score):
    """ Luo opiskelijalle Excel-yhteensopivan tenttikoodin """
    random_part = random.randint(10000000, 99999999)  # 8-numeroinen satunnaisluku
    score_str = f"{score:02d}"  # Muutetaan arvosana 2-numeroiseksi (08, 10 jne.)
    
    raw_data = f"{random_part}{score_str}"  # Yhdistet√§√§n satunnaisosa ja arvosana
    checksum = int(raw_data) % 97  # Oikea MOD97-laskenta koko numerosta
    full_code = f"{raw_data}{checksum:02d}"  # Lis√§t√§√§n tarkistusluku kahdella numerolla

    return full_code  # T√§m√§ voidaan suoraan k√§ytt√§√§ Exceliss√§


# **6Ô∏è‚É£ Vastausten tarkistus**
st.write("Kun ole tehnyt tentin tarkista vastauksesi allaolevasta napista")

if st.button("‚úÖ Tarkista vastaukset") and not st.session_state.submitted:
    review_prompt = "Analysoi seuraavat vastaukset ja anna yksityiskohtaiset perustelut:\n\n"

    for i in range(4):
        student_answer = st.session_state.user_answers.get(i, "Ei vastattu")
        correct_answer = st.session_state.correct_answers[i]
        student_answer_text = st.session_state.questions[i]["options"].get(student_answer, "Ei vastattu")
        correct_answer_text = st.session_state.questions[i]["options"].get(correct_answer, "Ei l√∂ydy")

        review_prompt += f"**Kysymys {i + 1}:** {st.session_state.questions[i]['question']}\n"
        review_prompt += f"üìå Opiskelijan vastaus: {student_answer} ({student_answer_text})\n"
        review_prompt += f"‚úÖ Oikea vastaus: {correct_answer} ({correct_answer_text})\n"
        review_prompt += "Selit√§ l√§√§ketieteellisesti, miksi vastaus on oikein tai v√§√§rin.\n\n"

    for i in range(2):
        review_prompt += f"**Sanallinen kysymys {i + 1}:** {st.session_state.short_answer_questions[i]}\n"
        review_prompt += f"üìå Opiskelijan vastaus: {st.session_state.short_answer_responses.get(f'short_answer_{i}', 'Ei vastattu')}\n"
        review_prompt += "Pisteyt√§ asteikolla 0‚Äì3, jos vastaus on tyhj√§ anna 0 pistett√§, jos vastaus on osittain oikein anna 1-2 pistett√§ ja t√§ysin oikeasta 3 pistett√§. Ilmoita selv√§sti muodossa 'Pisteytys: X'. Perustele arviointi yksityiskohtaisesti hyv√§ll√§ suomen kielell√§.\n\n"
    
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": review_prompt}]
    )

    st.session_state.feedback = response.choices[0].message.content

    # **Pisteiden laskenta**
    mcq_score = sum(1 for i in range(4) if st.session_state.user_answers.get(i) == st.session_state.correct_answers[i])

    # **Parannettu regex, joka l√∂yt√§√§ nyt "Pisteytys: X"**
    short_answer_scores = re.findall(r"Pisteytys:\s*(\d)", st.session_state.feedback)

    # **Summataan l√∂ydetyt pisteet**
    short_answer_score = sum(int(score) for score in short_answer_scores if score.isdigit())

    # **Lasketaan kokonaispistem√§√§r√§**
    st.session_state.total_score = mcq_score + short_answer_score
    st.session_state.submitted = True

if st.session_state.feedback:
    st.markdown(f"### üìò Tarkka vastausanalyysi:\n{st.session_state.feedback}")
    st.markdown(f"### üèÜ Pistem√§√§r√§si: {st.session_state.total_score} / 10")
    
# **Luo ja n√§yt√§ opiskelijan henkil√∂kohtainen tenttikoodi**
    exam_code = generate_exam_code(st.session_state.total_score)
    st.markdown(f"### üîë Tenttikoodisi: `{exam_code}`")
    st.write("S√§ilyt√§ t√§m√§ koodi! Sen avulla voit todistaa suorittaneesi tentin.")
